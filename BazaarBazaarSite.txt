AUCTION SITE

1. Models are entity:
	-- Bid
	-- User
	-- Product
	-- Notification
	-- Auction History
	-- Payment

2. Repository are
	-- ALL MY MODEL CLASS ARE REPOSITORY IN THIS CASE


3. Services:
    A service is typically a class that contains the business logic of the application.
    It is the place where your core logic for processing data or performing actions lives.
    Services act as intermediaries between the Controller and Repository layers, and they encapsulate your business rules.

   Responsibilities:
   Handle business logic.
   Coordinate different operations that involve data (e.g., interacting with the repository).
   Perform validation or computation before passing data to controllers.


4. DTOS(Request and Response) are 


5. Controller
    A service is typically a class that contains the business logic of the application.
    It is the place where your core logic for processing data or performing actions lives.
    Services act as intermediaries between the Controller and Repository layers, and they encapsulate your business rules.

    Responsibilities:
    Handle business logic.
    Coordinate different operations that involve data (e.g., interacting with the repository).
    Perform validation or computation before passing data to controllers.


6. Mapper


	                                PSEUDOCODE

PRODUCT
** createAProduct-> pass in the following details needed in creating a product
   -- search the repository to check a product by Id
   -- create new object of product
   -- setProductDescription
   -- setProductName,startingPrice,startTime,endTime,imageUrl,category
   -- save it in a repository
   return the product
** updateProduct-> pass in required details
   -- search the repository to check a product by Id
   -- if not found throw PRODUCT NOT FOUND
   -- create new object of product
   -- set required details
   -- save in a repository
   return product
** deleteProduct-> pass in required details
   -- search the repository by id
   -- if not found throw PRODUCT NOT FOUND
   -- productRepository. delete product
** viewProduct-> return productRepository. find by product id for a particular product


BID
** placeABid-> itemId, bidAmount,bidderUserName:
	-- Find Item by Id in the repository, if not found else throw an error ("product no found ")
	-- Create a new object of bid
	-- set the item, bid amount,username,Timestamp(currentTime)
	-- Save the id in a repository
	-- update the item with current bid
	-- setCurrentBid,item
	return bid;

What is JWT (JSON Web Token)?
JWT (JSON Web Token) is a compact, URL-safe means of representing claims between two parties.
 It is often used for securely transmitting information between the client and server in web applications.
 JWTs are commonly used for authentication and authorization in web apps, especially in RESTful APIs.

JWT consists of three parts:

Header
Payload
Signature

Let's break it down step by step:

1. What Does JWT Contain?
A JWT token typically consists of three parts, each separated by a dot (.):
header.payload.signature
1.1 Header
The Header typically consists of two parts:

Type of the token (JWT).
Signing algorithm that is used, such as HMAC SHA256 or RSA.
Example of a header in a JWT:

json
Copy
Edit
{
  "alg": "HS256",  // Algorithm
  "typ": "JWT"     // Type of token
}
In this example, HS256 refers to the HMAC SHA256 signing algorithm, and JWT is the type of the token.

1.2 Payload
The Payload contains the claims, which are statements about an entity (typically, the user) and additional data.
 There are three types of claims:

Registered claims: These are predefined claims that are recommended to use (e.g., sub, iat, exp, etc.).

sub: Subject (usually the user ID or identifier).

iat: Issued At (timestamp of when the token was issued).

exp: Expiration Time (timestamp of when the token should expire).

Public claims: These are custom claims that you can define.
 For example, you can store user roles or permissions in the token.

Private claims: These are custom claims shared between the sender and receiver.
 They are not registered claims and don't have to be universally known, but should be meaningful to the specific parties.

Example of a payload in a JWT:

json
Copy
Edit
{
  "sub": "1234567890",       // User identifier (e.g., user ID)
  "name": "John Doe",        // User name
  "iat": 1516239022          // Issued at time (Unix timestamp)
}
In this case, the payload contains the user's ID, name, and the timestamp when the token was issued.

1.3 Signature
The Signature is used to verify that the token has not been altered. It is created by taking the encoded header, encoded payload, and a secret key, and signing them using the algorithm specified in the header (e.g., HMAC SHA256).

The signature is generated using this formula:

scss
Copy
Edit
HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secretKey)
This ensures the integrity and authenticity of the token, as the receiver can use the secret key to verify the signature.

Example signature creation:

java
Copy
Edit
HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload), secretKey)
2. Example JWT
After encoding the Header and Payload in Base64Url format and then generating the Signature, you get a JWT.

A full JWT looks like this:

Copy
Edit
eyJhbGciOiAiSFMyNTYiLCJ0eXAiOiAiSldUIn0.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsIm5hbWUiOiAiSm9obiBEb2UiLCJpYXQiOiAxNTE2MjM5MDIyfQ.8c1fRftF...fiHv1xxTg43IQDqOdFugQ
Explanation:

eyJhbGciOiAiSFMyNTYiLCJ0eXAiOiAiSldUIn0: This is the Base64Url encoded header.

eyJzdWIiOiAiMTIzNDU2Nzg5MCIsIm5hbWUiOiAiSm9obiBEb2UiLCJpYXQiOiAxNTE2MjM5MDIyfQ: This is the Base64Url encoded payload.

8c1fRftF...fiHv1xxTg43IQDqOdFugQ: This is the signature created by signing the header and payload with a secret key.

3. JWT Use Case: Authentication & Authorization
JWT is often used for authentication and authorization in modern web applications.

3.1 Authentication
JWT is commonly used for user login. The flow looks like this:

User Logs In: The user sends a login request (username/password) to the server.

Server Generates JWT: If the credentials are valid, the server generates a JWT (containing claims like user ID, roles, etc.)
and sends it back to the user.

User Sends JWT in Subsequent Requests: The user sends the JWT token in the Authorization header of subsequent requests
(e.g., Authorization: Bearer <JWT>).

Server Verifies JWT: The server extracts the JWT from the request, verifies the signature and claims (such as expiration),
 and grants access if valid.

3.2 Authorization
JWT also provides authorization in the sense that roles or permissions can be encoded within the token.
 For example, you can include a claim like "role": "admin" and use that to restrict access to certain resources.

4. Why Use JWT?
There are several benefits of using JWT in modern applications:

Stateless Authentication: The server does not need to store session data. The JWT contains all necessary information about the user,
which makes it ideal for scalable, stateless applications.

Security: JWTs are signed (using a secret key or public/private keys) to ensure the data has not been tampered with.
 They can also be encrypted (JWE) to keep the payload confidential.
Flexibility: JWTs can carry a variety of claims, and you can design your payload to include the information that your application needs,
such as user roles, permissions, or expiration times.
Compact: JWT tokens are compact and URL-safe, making them ideal for transmission over HTTP headers or as URL parameters.

5. JWT Expiration
JWTs often include an expiration time (exp) claim, which specifies when the token will expire.
 This is useful for limiting the lifespan of a token and forcing users to re-authenticate after a period.

For example, if you set the expiration time to 1 hour, the token will become invalid after 1 hour,
and the user will need to log in again.
In the JwtUtil class, when generating the token, you can set the expiration time:
java
Copy
Edit
long expiryTime = 1000 * 60 * 60; // 1 hour
6. Common JWT Algorithms
There are two main types of algorithms used for signing JWTs:
Symmetric Algorithm (HS256, HS384, HS512): These algorithms use the same secret key for both signing and verifying the token.
Asymmetric Algorithm (RS256, RS384, RS512): These algorithms use a pair of public and private keys.
The server signs the token with the private key, and the client verifies the token using the public key.

7. JWT Validation
When the server receives a JWT, it must verify the tokenâ€™s validity:
Check Signature: Ensure the JWT was not tampered with by verifying the signature using the secret key or public key.
Check Expiration: Ensure the token has not expired.
Check Claims: Optionally, you can check other claims like sub (subject), iat (issued at), etc.,
to ensure the token is valid and belongs to the right user.

8. Common JWT Use Cases
Single Sign-On (SSO): JWT is commonly used in SSO systems because it allows multiple applications to trust a single authentication mechanism.
API Authentication: In RESTful APIs, JWT is used to authenticate and authorize users for specific API endpoints.
Mobile Applications: JWT is also widely used for authenticating mobile applications due to its compact size,
ease of transmission, and stateless nature.

9. JWT Flow Recap
Here is a recap of how JWT typically works in a web app:
User Logs In: User provides credentials (e.g., username/password) to the server.
Server Generates JWT: If authentication is successful, the server generates a JWT and sends it back to the client.
Client Stores JWT: The client stores the JWT, typically in localStorage or sessionStorage (on the browser),
or in memory (on mobile apps).
Client Sends JWT in Requests: For each subsequent request, the client includes the JWT in the Authorization header:
Authorization: Bearer <JWT>.

Server Verifies JWT: On receiving a request, the server verifies the JWT, checking the signature and claims,
and allows access if valid.
Conclusion
JWT is a powerful, lightweight way to handle authentication and authorization in modern web applications.
It allows for stateless communication between the client and server, making it ideal for distributed systems,
 mobile apps, and APIs. By encoding user information




